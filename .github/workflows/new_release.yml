name: new release

on:
  workflow_dispatch:
    inputs:
      Version:
        description: Version
        required: true

env:
  GIT_USER_EMAIL: "actions@github.com"
  GIT_USER_NAME: "GitHub Actions"
  DOCKER_IMAGE_NAME: "dockerbenj/lunchbon_backend"
  DOCKER_IMAGE_TAGS: ${{ github.event.inputs.Version }}
  DOCKER_REGISTRY: "docker.io"
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_SSH: ${{ secrets.AWS_SSH }}
  AWS_IP: ${{ secrets.AWS_IP }}
  AWS_DNS: ${{ secrets.AWS_IP }}
  AWS_HOST: ${{ secrets.AWS_HOST }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create artifact directory
        run: mkdir -p resources/build

      - name: Build with Gradle
        run: ./gradlew build
        id: build
        if: success()

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: lunchbon-build
          path: resources/build


  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@master

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Unit Tests
        run: ./gradlew runUnitTests
        if: success()

      - name: Run Integration Tests
        run: ./gradlew runIntegrationTests
        if: success()

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: lunchbon-build
          path: resources/build

  build_docker_image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build
        id: build
        if: success()

      - name: Build & push Docker image
        id: docker
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: "${{ env.DOCKER_IMAGE_NAME }}"
          tags: "${{ env.DOCKER_IMAGE_TAGS }},latest"
          registry: "${{ env.DOCKER_REGISTRY }}"
          dockerfile: Dockerfile
          username: "${{ env.DOCKER_USERNAME }}"
          password: "${{ env.DOCKER_PASSWORD }}"

      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: path/to/artifacts
          retention-days: 1

  deploy_docker_image:
    needs: build_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve saved Docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: path/to/artifacts

      - name: Docker load
        run: |
          cd path/to/artifacts
          docker load < docker-image.tar
          # docker_build_push.sh

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH }}

      - name: Connect EC2 instance and run Docker container
        run: |
          IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAGS }}"
          ssh -o StrictHostKeyChecking=no ubuntu@ec2-3-67-184-252.eu-central-1.compute.amazonaws.com "docker pull $IMAGE_NAME && docker run -d --restart unless-stopped -p 80:80 $IMAGE_NAME"

  naughtyfication:
    needs: [ deploy_docker_image ]
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: "${{ env.DISCORD_WEBHOOK }}"
        uses: Ilshidur/action-discord@master
        with:
          args: 'Version: ${{ env.DOCKER_IMAGE_TAGS }} of {{ EVENT_PAYLOAD.repository.full_name }} is now available!'
